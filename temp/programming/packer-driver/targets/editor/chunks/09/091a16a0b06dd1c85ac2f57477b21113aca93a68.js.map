{"version":3,"sources":["file:///D:/NinjaLoop/assets/Script/functions/util.ts"],"names":["clone","value","Array","isArray","map","v","newObj","key","max","arr","Math","flat","min","sum","s","forEach","average","length","weightRandom","list","totalWeights","weight","random","id","listRandom","floor"],"mappings":";;;;;AAAA,WAASA,KAAT,CAAeC,KAAf,EAAsB;AAClB,YAAO,OAAOA,KAAd;AACI,WAAK,QAAL;AACI,YAAGC,KAAK,CAACC,OAAN,CAAcF,KAAd,CAAH,EAAyB,OAAOA,KAAK,CAACG,GAAN,CAAUC,CAAC,IAAEL,KAAK,CAACK,CAAD,CAAlB,CAAP;AACzB,cAAMC,MAAM,GAAG,EAAf;;AACA,aAAI,MAAMC,GAAV,IAAiBN,KAAjB,EAAwBK,MAAM,CAACC,GAAD,CAAN,GAAcP,KAAK,CAACC,KAAK,CAACM,GAAD,CAAN,CAAnB;;AACxB,eAAOD,MAAP;;AACJ;AAAS,eAAOL,KAAP;AANb;AAQH;;AAED,WAASO,GAAT,CAAa,GAAGC,GAAhB,EAAqB;AACjB,WAAOC,IAAI,CAACF,GAAL,CAAS,GAAGC,GAAG,CAACE,IAAJ,EAAZ,CAAP;AACH;;AAED,WAASC,GAAT,CAAa,GAAGH,GAAhB,EAAqB;AACjB,WAAOC,IAAI,CAACE,GAAL,CAAS,GAAGH,GAAG,CAACE,IAAJ,EAAZ,CAAP;AACH;;AAED,WAASE,GAAT,CAAa,GAAGJ,GAAhB,EAAqB;AACjB,QAAIK,CAAC,GAAG,CAAR;AACAL,IAAAA,GAAG,CAACE,IAAJ,GAAWI,OAAX,CAAmBV,CAAC,IAAES,CAAC,IAAET,CAAzB;AACA,WAAOS,CAAP;AACH;;AAED,WAASE,OAAT,CAAiB,GAAGP,GAApB,EAAyB;AACrB,UAAMK,CAAC,GAAGD,GAAG,CAAC,GAAGJ,GAAJ,CAAb;AACA,WAAOK,CAAC,GAAGL,GAAG,CAACE,IAAJ,GAAWM,MAAtB;AACH;;AAED,WAASC,YAAT,CAAsBC,IAAtB,EAA4B;AACxB,QAAIC,YAAY,GAAG,CAAnB;;AACA,SAAI,MAAM,GAAGC,MAAH,CAAV,IAAwBF,IAAxB,EACIC,YAAY,IAAIC,MAAhB;;AAEJ,QAAIC,MAAM,GAAGZ,IAAI,CAACY,MAAL,KAAgBF,YAA7B;;AACA,SAAI,MAAM,CAACG,EAAD,EAAKF,MAAL,CAAV,IAA0BF,IAA1B,EACI,IAAG,CAACG,MAAM,IAAED,MAAT,IAAiB,CAApB,EACI,OAAOE,EAAP;;AACR,WAAOJ,IAAI,CAACA,IAAI,CAACF,MAAL,GAAY,CAAb,CAAX;AACH;;AAED,WAASO,UAAT,CAAoBL,IAApB,EAA0B;AACtB,WAAOA,IAAI,CAACT,IAAI,CAACe,KAAL,CAAWf,IAAI,CAACY,MAAL,KAAgBH,IAAI,CAACF,MAAhC,CAAD,CAAX;AACH;;;WAEQjB,K;SAAOQ,G;SAAKI,G;SAAKC,G;aAAKG,O;kBAASE,Y;gBAAcM","sourcesContent":["function clone(value) {\n    switch(typeof value) {\n        case 'object':\n            if(Array.isArray(value)) return value.map(v=>clone(v));\n            const newObj = {};\n            for(const key in value) newObj[key] = clone(value[key]);\n            return newObj;\n        default: return value;\n    }\n}\n\nfunction max(...arr) {\n    return Math.max(...arr.flat());\n}\n\nfunction min(...arr) {\n    return Math.min(...arr.flat());\n}\n\nfunction sum(...arr) {\n    let s = 0;\n    arr.flat().forEach(v=>s+=v);\n    return s;\n}\n\nfunction average(...arr) {\n    const s = sum(...arr);\n    return s / arr.flat().length;\n}\n\nfunction weightRandom(list) {\n    let totalWeights = 0;\n    for(const [, weight] of list)\n        totalWeights += weight;\n\n    let random = Math.random() * totalWeights;\n    for(const [id, weight] of list)\n        if((random-=weight)<0)\n            return id;\n    return list[list.length-1];\n}\n\nfunction listRandom(list) {\n    return list[Math.floor(Math.random() * list.length)];\n}\n\nexport { clone, max, min, sum, average, weightRandom, listRandom };"]}