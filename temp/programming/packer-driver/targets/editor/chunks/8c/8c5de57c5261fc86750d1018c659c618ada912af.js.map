{"version":3,"sources":["file:///D:/NinjaLoop/assets/Script/event.ts"],"names":["Event","clone","checkCondition","constructor","initial","events","id","event","branch","map","b","split","Number","count","Object","keys","length","check","eventId","property","include","exclude","NoRandom","get","Error","information","description","do","effect","postEvent","cond","next"],"mappings":";;;qDAGMA,K;;;;;;;;;;;;;;;;;;;;AAHGC,MAAAA,K,iBAAAA,K;;AACAC,MAAAA,c,iBAAAA,c;;;;;;;;;AAEHF,MAAAA,K,GAAN,MAAMA,KAAN,CAAY;AACRG,QAAAA,WAAW,GAAG;AAAA;AAAA;AAAA;AAAA;AAAE;;AAIhBC,QAAAA,OAAO,CAAC;AAACC,UAAAA;AAAD,SAAD,EAAW;AACd,gEAAeA,MAAf;;AACA,eAAI,MAAMC,EAAV,IAAgBD,MAAhB,EAAwB;AACpB,kBAAME,KAAK,GAAGF,MAAM,CAACC,EAAD,CAApB;AACA,gBAAG,CAACC,KAAK,CAACC,MAAV,EAAkB;AAClBD,YAAAA,KAAK,CAACC,MAAN,GAAeD,KAAK,CAACC,MAAN,CAAaC,GAAb,CAAiBC,CAAC,IAAE;AAC/BA,cAAAA,CAAC,GAAGA,CAAC,CAACC,KAAF,CAAQ,GAAR,CAAJ;AACAD,cAAAA,CAAC,CAAC,CAAD,CAAD,GAAOE,MAAM,CAACF,CAAC,CAAC,CAAD,CAAF,CAAb;AACA,qBAAOA,CAAP;AACH,aAJc,CAAf;AAKH;AACJ;;AAEDG,QAAAA,KAAK,GAAG;AACJ,iBAAOC,MAAM,CAACC,IAAP,6BAAY,IAAZ,qBAA0BC,MAAjC;AACH;;AAEDC,QAAAA,KAAK,CAACC,OAAD,EAAUC,QAAV,EAAoB;AACrB,gBAAM;AAAEC,YAAAA,OAAF;AAAWC,YAAAA,OAAX;AAAoBC,YAAAA;AAApB,cAAiC,KAAKC,GAAL,CAASL,OAAT,CAAvC;AACA,cAAGI,QAAH,EAAa,OAAO,KAAP;AACb,cAAGD,OAAO,IAAI;AAAA;AAAA,gDAAeF,QAAf,EAAyBE,OAAzB,CAAd,EAAiD,OAAO,KAAP;AACjD,cAAGD,OAAH,EAAY,OAAO;AAAA;AAAA,gDAAeD,QAAf,EAAyBC,OAAzB,CAAP;AACZ,iBAAO,IAAP;AACH;;AAEDG,QAAAA,GAAG,CAACL,OAAD,EAAU;AACT,gBAAMX,KAAK,GAAG,oDAAaW,OAAb,CAAd;;AACA,cAAG,CAACX,KAAJ,EAAW,MAAM,IAAIiB,KAAJ,CAAW,oBAAmBN,OAAQ,GAAtC,CAAN;AACX,iBAAO;AAAA;AAAA,8BAAMX,KAAN,CAAP;AACH;;AAEDkB,QAAAA,WAAW,CAACP,OAAD,EAAU;AACjB,gBAAM;AAAEX,YAAAA,KAAK,EAAEmB;AAAT,cAAyB,KAAKH,GAAL,CAASL,OAAT,CAA/B;AACA,iBAAO;AAAEQ,YAAAA;AAAF,WAAP;AACH;;AAEDC,QAAAA,EAAE,CAACT,OAAD,EAAUC,QAAV,EAAoB;AAClB,gBAAM;AAAES,YAAAA,MAAF;AAAUpB,YAAAA,MAAV;AAAkBD,YAAAA,KAAK,EAAEmB,WAAzB;AAAsCG,YAAAA;AAAtC,cAAoD,KAAKN,GAAL,CAASL,OAAT,CAA1D;AACA,cAAGV,MAAH,EACI,KAAI,MAAM,CAACsB,IAAD,EAAOC,IAAP,CAAV,IAA0BvB,MAA1B,EACI,IAAG;AAAA;AAAA,gDAAeW,QAAf,EAAyBW,IAAzB,CAAH,EACI,OAAO;AAAEF,YAAAA,MAAF;AAAUG,YAAAA,IAAV;AAAgBL,YAAAA;AAAhB,WAAP;AACZ,iBAAO;AAAEE,YAAAA,MAAF;AAAUC,YAAAA,SAAV;AAAqBH,YAAAA;AAArB,WAAP;AACH;;AAhDO,O;;yBAoDG1B,K","sourcesContent":["import { clone } from './functions/util';\nimport { checkCondition } from './functions/condition';\n\nclass Event {\n    constructor() {}\n\n    #events;\n\n    initial({events}) {\n        this.#events = events;\n        for(const id in events) {\n            const event = events[id];\n            if(!event.branch) continue;\n            event.branch = event.branch.map(b=>{\n                b = b.split(':');\n                b[1] = Number(b[1]);\n                return b;\n            });\n        }\n    }\n\n    count() {\n        return Object.keys(this.#events).length;\n    }\n\n    check(eventId, property) {\n        const { include, exclude, NoRandom } = this.get(eventId);\n        if(NoRandom) return false;\n        if(exclude && checkCondition(property, exclude)) return false;\n        if(include) return checkCondition(property, include);\n        return true;\n    }\n\n    get(eventId) {\n        const event = this.#events[eventId];\n        if(!event) throw new Error(`[ERROR] No Event[${eventId}]`);\n        return clone(event);\n    }\n\n    information(eventId) {\n        const { event: description } = this.get(eventId)\n        return { description };\n    }\n\n    do(eventId, property) {\n        const { effect, branch, event: description, postEvent } = this.get(eventId);\n        if(branch)\n            for(const [cond, next] of branch)\n                if(checkCondition(property, cond))\n                    return { effect, next, description };\n        return { effect, postEvent, description };\n    }\n\n}\n\nexport default Event;"]}