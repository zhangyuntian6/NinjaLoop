{"version":3,"sources":["file:///D:/NinjaLoop/assets/Script/event.ts"],"names":["Event","clone","checkCondition","constructor","initial","events","id","event","startsWith","push","branch","map","b","split","Number","count","Object","keys","length","check","eventId","property","include","exclude","NoRandom","get","Error","information","description","do","effect","postEvent","cond","next","getRandomEvents","random","validEvents","filter","_event","_property","allRandomEvents","eligibleRandomEvents","eventDetails","randomIndex","Math","floor","randomEventId","console","warn","weightRandom"],"mappings":"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","sourcesContent":["import { clone } from './functions/util';\nimport { checkCondition } from './functions/condition';\n\nclass Event {\n    constructor() {}\n\n    #events;\n    #randomEvents: string[] = []; // Added field\n\n    initial({events}) {\n        this.#events = events;\n        this.#randomEvents = []; // Clear previous data if initial is called again\n        for(const id in events) {\n            const event = events[id];\n            if (id.startsWith('RDM')) { // Added logic to populate #randomEvents\n                this.#randomEvents.push(id);\n            }\n            if(!event.branch) continue;\n            event.branch = event.branch.map(b=>{\n                b = b.split(':');\n                b[1] = Number(b[1]);\n                return b;\n            });\n        }\n    }\n\n    count() {\n        return Object.keys(this.#events).length;\n    }\n\n    check(eventId, property) {\n        const { include, exclude, NoRandom } = this.get(eventId);\n        if(NoRandom) return false;\n        if(exclude && checkCondition(property, exclude)) return false;\n        if(include) return checkCondition(property, include);\n        return true;\n    }\n\n    get(eventId) {\n        const event = this.#events[eventId];\n        if(!event) throw new Error(`[ERROR] No Event[${eventId}]`);\n        return clone(event);\n    }\n\n    information(eventId) {\n        const { event: description } = this.get(eventId)\n        return { description };\n    }\n\n    do(eventId, property) {\n        const { effect, branch, event: description, postEvent } = this.get(eventId);\n        if(branch)\n            for(const [cond, next] of branch)\n                if(checkCondition(property, cond))\n                    return { effect, next, description };\n        return { effect, postEvent, description };\n    }\n\n    getRandomEvents() { // Added method\n        return this.#randomEvents;\n    }\n\n    random(events) {\n        const validEvents = events.filter(\n            ([eventId]) => this._event.check(eventId, this._property)\n        );\n\n        if (validEvents.length === 0) {\n            // If no valid events, choose a random event with ID starting with 'RDM'\n            const allRandomEvents = this._event.getRandomEvents();\n            // Filter out RDM events that have NoRandom: 1\n            const eligibleRandomEvents = allRandomEvents.filter(eventId => {\n                const eventDetails = this._event.get(eventId);\n                return !eventDetails.NoRandom;\n            });\n\n            if (eligibleRandomEvents.length > 0) {\n                const randomIndex = Math.floor(Math.random() * eligibleRandomEvents.length);\n                const randomEventId = eligibleRandomEvents[randomIndex];\n                // Return just the event ID string for the fallback case\n                return randomEventId;\n            } else {\n                // No valid events and no eligible RDM events found.\n                console.warn(\"No valid events and no eligible RDM events found.\");\n                return null; // Return null to indicate no event was selected\n            }\n        } else {\n            // Otherwise, use weightRandom on the valid events\n            return weightRandom(validEvents);\n        }\n    }\n\n}\n\nexport default Event;\n"]}