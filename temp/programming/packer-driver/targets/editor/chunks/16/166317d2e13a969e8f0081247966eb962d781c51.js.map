{"version":3,"sources":["file:///D:/NinjaLoop/assets/Script/Utils/ConfigManager.ts"],"names":["ConfigManager","resources","readJson","path","Promise","resolve","reject","load","err","jsonObj","console","error","json"],"mappings":";;;6EACqBA,a;;;;;;;;;AADQC,MAAAA,S,OAAAA,S;;;;;;;;;yBACRD,a,GAAN,MAAMA,aAAN,CAAoB;AACT,eAARE,QAAQ,CAACC,IAAD,EAAc;AAChC,iBAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCL,YAAAA,SAAS,CAACM,IAAV,CAAeJ,IAAf,EAAqB,UAASK,GAAT,EAAcC,OAAd,EAA4B;AAC7C,kBAAID,GAAJ,EAAS;AACLE,gBAAAA,OAAO,CAACC,KAAR,CAAcH,GAAd;AACAF,gBAAAA,MAAM,CAACE,GAAD,CAAN;AACH,eAHD,MAGO;AACHH,gBAAAA,OAAO,CAACI,OAAO,CAACG,IAAT,CAAP;AACH;AACJ,aAPD;AAQH,WATM,CAAP;AAWH;;AAb8B,O","sourcesContent":["import { _decorator, loader, resources } from 'cc';\nexport default class ConfigManager {\n    public static readJson(path:string) {\n        return new Promise((resolve, reject) => {\n            resources.load(path, function(err, jsonObj: any) {\n                if (err) {\n                    console.error(err);\n                    reject(err);\n                } else {\n                    resolve(jsonObj.json);\n                }\n            });\n        });\n\n    }\n}"]}