{"version":3,"sources":["file:///D:/NinjaLoop/assets/Script/UI/LifeTrackPanel.ts"],"names":["_decorator","Node","Prefab","instantiate","Vec3","ScrollView","Button","Label","Color","PropNameMap","lifeMgr","eventMsg","LifeTrackItem","PropItem","UIPanel","ccclass","property","showPropKeys","autoPlayColor","LifeTrackPanel","type","_autoPlayButtonLbl","_autoPlayButton","_changeSpeedButtonLbl","_isEnd","_isAutoPlay","_triggerTime","_timeScale","_timeScaleArray","_curTimeScaleIndex","_contentUITrans","_spacing","_curMaxHeight","_propItemsMap","Map","realTriggerTime","onLoad","start","initPanel","lifeTrackGroup","_uiProps","uiTransformComp","autoPlayButtonNode","getComponentInChildren","getComponent","changeSpeedButton","createLifeTrack","age","description","itemNode","lifeTrackItemPrfb","setParent","item","setData","itemHeight","getHeight","setPosition","setLineLength","height","createPropItem","name","value","propItemPrfb","propGroup","onReplayButtonClicked","emit","initProp","removeAllChildren","clear","getLastRecord","forEach","key","set","updatePropData","get","updateValue","onShow","selectedTalentList","propData","nextYearButtonNode","active","restartButtonNode","setAutoPlayButtonState","initData","Object","assign","selectedTalentIds","map","talentInfo","id","TLT","contents","restart","triggerOneLifeTrack","onNextYearButtonClicked","onAutoPlayButtonClicked","isPlaying","normalColor","node","string","WHITE","track","next","showOneTrackItem","scrollView","scrollToBottom","isEnd","onLifeEnd","setTimeout","contentText","content","grade","postEvent","join","onChangeSpeedButtonClicked","length"],"mappings":"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","sourcesContent":["\nimport { _decorator, Component, Node, Prefab, instantiate, UITransform, Vec3, ScrollView, Button, Label, Color } from 'cc';\nimport { PropNameMap } from '../Defines';\nimport { ITrackData, lifeMgr } from '../Life';\nimport { ITalentInfo } from '../Talent';\nimport { eventMsg } from '../Utils/EventMessage';\nimport { LifeTrackItem } from './LifeTrackItem';\nimport { PropItem } from './PropItem';\nimport { UIPanel } from './UIPanel';\nconst { ccclass, property } = _decorator;\n\nconst showPropKeys = [\n    'CHR',\n    'INT',\n    'STR',\n    'MNY',\n    'SPR'\n];\n\nconst autoPlayColor = new Color(53, 194, 115);\n \n@ccclass('LifeTrackPanel')\nexport class LifeTrackPanel extends UIPanel {\n    @property(ScrollView)\n    public scrollView: ScrollView  = null!;\n    @property({type: Node})\n    public lifeTrackGroup: Node;\n    @property({type: Prefab})\n    public lifeTrackItemPrfb: Prefab;\n\n    @property({type: Node})\n    public propGroup: Node;\n    @property({type: Prefab})\n    public propItemPrfb: Prefab;\n\n    @property({type: Node})\n    public nextYearButtonNode: Node;\n    @property({type: Node})\n    public autoPlayButtonNode: Node;\n    @property({type: Node})\n    public restartButtonNode: Node;\n    @property({type: Button})\n    public changeSpeedButton: Button;\n\n\n    private _autoPlayButtonLbl: Label;\n    private _autoPlayButton: Button;\n    private _changeSpeedButtonLbl: Label;\n\n    private _isEnd = false;\n    private _isAutoPlay = false;\n    private _triggerTime = 1000; // 1s\n    private _timeScale = 1;\n    private _timeScaleArray = [1, 2, 4, 8, 20];\n    private _curTimeScaleIndex = 0;\n    private _contentUITrans!: UITransform;\n    private _spacing = 5;\n    private _curMaxHeight = 0;\n    private _propItemsMap: Map<string, PropItem> = new Map<string, PropItem>();\n\n    get realTriggerTime() {\n        return this._triggerTime / this._timeScale;\n    }\n\n    onLoad () {\n        // this._contentUITrans = this.lifeTrackGroup._uiProps.uiTransformComp;\n    }\n\n    public start() {\n\n    }\n\n    initPanel() {\n        this._contentUITrans = this.lifeTrackGroup._uiProps.uiTransformComp;\n        this._autoPlayButtonLbl = this.autoPlayButtonNode.getComponentInChildren(Label);\n        this._autoPlayButton = this.autoPlayButtonNode.getComponent(Button);\n        this._changeSpeedButtonLbl = this.changeSpeedButton.getComponentInChildren(Label);\n    }\n\n    // update (deltaTime: number) {\n    //     // [4]\n    // }\n\n    public createLifeTrack(age:string, description: string) {\n        const itemNode = instantiate(this.lifeTrackItemPrfb);\n        itemNode.setParent(this.lifeTrackGroup);\n        const item = itemNode.getComponent(LifeTrackItem);\n        item.setData(age, description);\n        const itemHeight = item.getHeight();\n        itemNode.setPosition(new Vec3(0, this._curMaxHeight, 0));\n        item.setLineLength(itemHeight + this._spacing);\n\n        this._curMaxHeight -= itemHeight + this._spacing;\n        this._contentUITrans.height = -this._curMaxHeight;\n    }\n\n    public createPropItem(name: string, value: number) {\n        const itemNode = instantiate(this.propItemPrfb);\n        itemNode.setParent(this.propGroup);\n        const item = itemNode.getComponent(PropItem);\n        item.setData(name, value);\n        return item;\n    }\n\n    public onReplayButtonClicked() {\n        eventMsg.emit('Replay');\n    }\n\n    public initProp() {\n        this.propGroup.removeAllChildren();\n        this._propItemsMap.clear();\n        const property = lifeMgr.getLastRecord();\n        showPropKeys.forEach((key) => {\n            this._propItemsMap.set(key, this.createPropItem(PropNameMap[key], property[key]));\n        })\n    }\n\n    updatePropData() {\n        const property = lifeMgr.getLastRecord();\n        showPropKeys.forEach((key) => {\n            const item = this._propItemsMap.get(key);\n            item?.updateValue(property[key]);\n        })\n    }\n\n    protected onShow(selectedTalentList: ITalentInfo[], propData) {\n        this._isEnd = false;\n        this._isAutoPlay = false;\n        this._curMaxHeight = 0;\n\n        // bug:start不执行，先放这里\n        this.initPanel();\n        this.nextYearButtonNode.active = true;\n        this.autoPlayButtonNode.active = true;\n        this.restartButtonNode.active = false;\n        this.setAutoPlayButtonState(false);\n\n        this.lifeTrackGroup.removeAllChildren();\n        const initData: any = {};\n        Object.assign(initData, propData);\n        const selectedTalentIds = selectedTalentList.map((talentInfo)=>talentInfo.id);\n        initData.TLT = selectedTalentIds;\n\n        const contents = lifeMgr.restart(initData);\n        this.initProp();\n\n\n        this.triggerOneLifeTrack();\n    }\n\n\n    public onNextYearButtonClicked() {\n        this.triggerOneLifeTrack();\n    }\n\n    public onAutoPlayButtonClicked() {\n        if (this._isAutoPlay) {\n            this._isAutoPlay = false;     \n        } else {\n            this._isAutoPlay = true;\n            this.triggerOneLifeTrack();\n        }\n\n        this.setAutoPlayButtonState(this._isAutoPlay);\n    }\n\n    setAutoPlayButtonState(isPlaying: boolean) {\n        if (isPlaying) {\n            this._autoPlayButton.normalColor = autoPlayColor;\n            this.changeSpeedButton.node.active = true;\n            this._changeSpeedButtonLbl.string = `X${this._timeScale}`;\n        } else {\n            this._autoPlayButton.normalColor = Color.WHITE;\n            this.changeSpeedButton.node.active = false;\n        }\n    }\n\n    public triggerOneLifeTrack() {\n        if (!this._isEnd) {\n            let track = lifeMgr.next();\n            this.showOneTrackItem(track);\n            this.updatePropData();\n            this.scrollView.scrollToBottom(0.5);\n            this._isEnd = track.isEnd;\n            if (this._isEnd) {\n                this.onLifeEnd();\n            } else {\n                if (this._isAutoPlay) {\n                    setTimeout(()=> {\n                        this.triggerOneLifeTrack();\n                    },this.realTriggerTime);\n                }\n            }\n        }   \n    }\n\n    public showOneTrackItem(track: ITrackData) {\n        const contentText = track.content.map(\n            ({type, description, grade, name, postEvent}) => {\n                switch(type) {\n                    case 'TLT':\n                        return `天赋【${name}】发动：${description}`;\n                    case 'EVT':\n                        return description + (postEvent?`<br/>${postEvent}`:'');\n                }\n            }\n        ).join('<br/>');\n        \n        this.createLifeTrack(`${track.age}天 `, contentText)\n    }\n\n    onLifeEnd() {\n        this.nextYearButtonNode.active = false;\n        this.autoPlayButtonNode.active = false;\n        this.restartButtonNode.active = true;\n    }\n\n    public onChangeSpeedButtonClicked() {\n        this._curTimeScaleIndex = ++this._curTimeScaleIndex % this._timeScaleArray.length;\n        this._timeScale = this._timeScaleArray[this._curTimeScaleIndex];\n        this._changeSpeedButtonLbl.string = `X${this._timeScale}`;\n    }\n}\n"]}