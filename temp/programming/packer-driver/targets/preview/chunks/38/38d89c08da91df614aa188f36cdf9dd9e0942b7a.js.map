{"version":3,"sources":["file:///D:/NinjaLoop/assets/Script/achievement.ts"],"names":["Achievement","clone","checkCondition","eventMsg","Message","constructor","Opportunity","START","TRAJECTORY","SUMMARY","END","initial","achievements","count","Object","keys","length","list","property","values","map","id","name","opportunity","description","hide","grade","isAchieved","get","achievementId","achievement","Error","check","condition","achieved","TYPES","ACHV","achieve","filter","o","forEach","emit"],"mappings":"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","sourcesContent":["import { clone } from './functions/util';\nimport { checkCondition } from './functions/condition';\nimport { eventMsg } from './Utils/EventMessage';\nimport { Message } from './Defines';\n\ninterface IListAchievementData {\n    id: number;\n    name: string;\n    opportunity: number;\n    description: string;\n    hide: number;\n    grade: number;\n    isAchieved: boolean;\n}\n\nclass Achievement {\n    constructor() {}\n\n    // 时机\n    Opportunity = {\n        START: \"START\",             // 分配完成点数，点击开始新人生后\n        TRAJECTORY: \"TRAJECTORY\",   // 每一年的人生经历中\n        SUMMARY: \"SUMMARY\",         // 人生结束，点击人生总结后\n        END: \"END\",                 // 游戏完成，点击重开 重开次数在这之后才会+1\n    };\n\n    #achievements;\n\n    initial({achievements}) {\n        this.#achievements = achievements;\n    }\n\n    count() {\n        return Object.keys(this.#achievements).length;\n    }\n\n    list(property): IListAchievementData[] {\n        return Object\n            .values(this.#achievements)\n            .map(({\n                id, name, opportunity,\n                description, hide, grade,\n            })=>({\n                id, name, opportunity,\n                description, hide, grade,\n                isAchieved: this.isAchieved(id, property),\n            }));\n    }\n\n    get(achievementId) {\n        const achievement = this.#achievements[achievementId];\n        if(!achievement) throw new Error(`[ERROR] No Achievement[${achievementId}]`);\n        return clone(achievement);\n    }\n\n    check(achievementId, property) {\n        const { condition } = this.get(achievementId);\n        return checkCondition(property, condition);\n    }\n\n    isAchieved(achievementId, property) {\n        for(const [achieved] of (property.get(property.TYPES.ACHV)||[]))\n            if(achieved == achievementId) return true;\n        return false;\n    }\n\n    achieve(opportunity, property) {\n        this.list(property)\n            .filter(({isAchieved})=>!isAchieved)\n            .filter(({opportunity: o})=>o==opportunity)\n            .filter(({id})=>this.check(id, property))\n            .forEach(({id})=>{\n                property.achieve(property.TYPES.ACHV, id)\n                eventMsg.emit(Message.Achievement, this.get(id));\n            });\n    }\n}\n\nexport { Achievement };\nexport type{ IListAchievementData };\n"]}