{"version":3,"sources":["file:///D:/NinjaLoop/assets/Script/UI/AchievementPanel.ts"],"names":["_decorator","Node","Prefab","instantiate","getGrade","getRate","lifeMgr","AchievementItem","StatisticsItem","UIPanel","ccclass","property","AchievementPanel","type","_contentUITrans","_itemHeight","_spacingY","start","achievementItemsGroup","_uiProps","uiTransformComp","createAchievementItem","data","itemNode","achievementItemPrfb","setParent","item","getComponent","setData","itemNum","children","length","lines","Math","round","height","createStatisticsItem","title","desc","grade","statisticsItemPrfb","statisticsItemsGroup","onShow","removeAllChildren","achievementsData","getAchievements","forEach","name","description","hide","isAchieved","generateStatisticsData","times","achievement","talentRate","eventRate","getTotal","formatRate","floor","value","rate","color","Object","keys","parseInt","r","values"],"mappings":"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","sourcesContent":["\nimport { _decorator, Component, Node, Prefab, instantiate, UITransform } from 'cc';\nimport { getGrade, getRate } from '../functions/addition';\nimport { lifeMgr } from '../Life';\nimport { AchievementItem, IAchievementItemData } from './AchievementItem';\nimport { StatisticsItem } from './StatisticsItem';\nimport { UIPanel } from './UIPanel';\nconst { ccclass, property } = _decorator;\n\n\n \n@ccclass('AchievementPanel')\nexport class AchievementPanel extends UIPanel {\n    @property({type: Node})\n    public achievementItemsGroup: Node;\n    @property({type: Prefab})\n    public achievementItemPrfb: Prefab;\n\n    @property({type: Node})\n    public statisticsItemsGroup: Node;\n    @property({type: Prefab})\n    public statisticsItemPrfb: Prefab;\n\n    private _contentUITrans!: UITransform;\n    private _itemHeight = 150;\n    private _spacingY = 20;\n\n    start () {\n        // [3]\n        this._contentUITrans = this.achievementItemsGroup._uiProps.uiTransformComp;\n    }\n\n    // update (deltaTime: number) {\n    //     // [4]\n    // }\n\n    createAchievementItem(data: IAchievementItemData) {\n        const itemNode = instantiate(this.achievementItemPrfb);\n        itemNode.setParent(this.achievementItemsGroup);\n        const item = itemNode.getComponent(AchievementItem);\n        item.setData(data);\n\n        const itemNum = this.achievementItemsGroup.children.length;\n        const lines = Math.round(itemNum / 2);\n        this._contentUITrans.height = lines * this._itemHeight + this._spacingY * (lines - 1);\n    }\n\n    createStatisticsItem(title: string, desc: string, grade: number) {\n        const itemNode = instantiate(this.statisticsItemPrfb);\n        itemNode.setParent(this.statisticsItemsGroup);\n        const item = itemNode.getComponent(StatisticsItem);\n        item.setData(title, desc, grade);\n    }\n\n    protected onShow() {\n        this.achievementItemsGroup.removeAllChildren();\n        this._contentUITrans = this.achievementItemsGroup._uiProps.uiTransformComp;\n        const achievementsData = lifeMgr.getAchievements();\n        achievementsData.forEach(({name, description, hide, grade, isAchieved}) => {\n            this.createAchievementItem({\n                name,\n                description,\n                hide,\n                grade,\n                isAchieved\n            });\n        });\n\n        this.generateStatisticsData();\n    }\n\n    generateStatisticsData() {\n        this.statisticsItemsGroup.removeAllChildren();\n        const { times, achievement, talentRate, eventRate } = lifeMgr.getTotal();\n        this.createStatisticsItem(`已重开${times}次`, `${this.formatRate('times', times)}`, getGrade('times', times));\n        this.createStatisticsItem(`成就达成${achievement}个`, `${this.formatRate('achievement', achievement)}`, getGrade('achievement', achievement));\n        this.createStatisticsItem(`事件收集率`, `${Math.floor(eventRate * 100)}%`, getGrade('eventRate', eventRate));\n        this.createStatisticsItem(`天赋收集率`, `${Math.floor(talentRate * 100)}%`, getGrade('talentRate', talentRate));\n    }\n\n    formatRate (type, value) {\n        const rate = getRate(type, value);\n        let color = Object.keys(rate)[0];\n        switch(parseInt(color)) {\n            case 0: color = '白色'; break;\n            case 1: color = '蓝色'; break;\n            case 2: color = '紫色'; break;\n            case 3: color = '橙色'; break;\n            default: break;\n        }\n        let r = Object.values(rate)[0];\n        switch(parseInt(r)) {\n            case 1: r = '不变'; break;\n            case 2: r = '翻倍'; break;\n            case 3: r = '三倍'; break;\n            case 4: r = '四倍'; break;\n            case 5: r = '五倍'; break;\n            case 6: r = '六倍'; break;\n            default: break;\n        }\n        return `抽到${color}概率${r}`;\n    }\n}\n"]}