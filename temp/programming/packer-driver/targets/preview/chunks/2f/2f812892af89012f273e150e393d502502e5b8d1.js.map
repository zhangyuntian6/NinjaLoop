{"version":3,"sources":["file:///D:/NinjaLoop/assets/Script/Talent.ts"],"names":["TalentManager","clone","weightRandom","checkCondition","extractMaxTriggers","getRate","constructor","_talents","initial","talents","id","talent","Number","grade","max_triggers","condition","replacement","key","obj","value","split","count","Object","keys","length","check","talentId","property","get","Error","information","name","description","exclusive","exclusiveId","e","talentRandom","include","times","achievement","rate","rateAddition","timesRate","achievementRate","randomGrade","randomNumber","Math","floor","random","talentList","push","Array","fill","map","v","i","splice","allocationAddition","isArray","addition","status","do","effect","replace","getReplaceList","list","forEach","replaceList","rand","concat","newTalents","result","replaceId","callback","talentMgr"],"mappings":"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","sourcesContent":["import { clone, weightRandom } from './functions/util';\nimport { checkCondition, extractMaxTriggers } from './functions/condition';\nimport { getRate } from './functions/addition';\n\ninterface ITalentInfo {\n    id: number;\n    grade: number;\n    name: string;\n    description: string;\n}\n\ninterface IReplacement {\n    grade: number[];\n    talent: string [];\n}\n\ninterface ITalentData extends ITalentInfo {\n    condition?: string;\n    exclusive?: string[];\n    effect?: string[];\n    status?: number;\n    replacement?: IReplacement;\n    max_triggers?: number;\n}\n\n\n\nclass TalentManager {\n    constructor() {}\n\n    _talents;\n\n    initial({talents}) {\n        this._talents = talents;\n        for(const id in talents) {\n            const talent = talents[id];\n            talent.id= Number(id);\n            talent.grade = Number(talent.grade);\n            talent.max_triggers = extractMaxTriggers(talent.condition);\n            if(talent.replacement) {\n                for(let key in talent.replacement) {\n                    const obj = {};\n                    for(let value of talent.replacement[key]) {\n                        value = `${value}`.split('*');\n                        obj[value[0]||0] = Number(value[1]) || 1;\n                    }\n                    talent.replacement[key] = obj;\n                }\n            }\n        }\n    }\n\n    count() {\n        return Object.keys(this._talents).length;\n    }\n\n    check(talentId, property) {\n        const { condition } = this.get(talentId);\n        return checkCondition(property, condition);\n    }\n\n    get(talentId): ITalentData {\n        const talent = this._talents[talentId];\n        if(!talent) throw new Error(`[ERROR] No Talent[${talentId}]`);\n        return clone(talent);\n    }\n\n    information(talentId) {\n        const { grade, name, description } = this.get(talentId)\n        return { grade, name, description };\n    }\n\n    exclusive(talents, exclusiveId) {\n        const { exclusive } = this.get(exclusiveId);\n        if(!exclusive) return null;\n        for(const talent of talents) {\n            for(const e of exclusive) {\n                if(talent == e) return talent;\n            }\n        }\n        return null;\n    }\n\n    talentRandom(include, {times = 0, achievement = 0} = {}): ITalentInfo[] {\n        const rate = { 1:100, 2:10, 3:1, };\n        const rateAddition = { 1:1, 2:1, 3:1, };\n        const timesRate = getRate('times', times);\n        const achievementRate = getRate('achievement', achievement);\n\n        for(const grade in timesRate)\n            rateAddition[grade] += timesRate[grade] - 1;\n\n        for(const grade in achievementRate)\n            rateAddition[grade] += achievementRate[grade] - 1;\n\n        for(const grade in rateAddition)\n            rate[grade] *= rateAddition[grade];\n\n        const randomGrade = () => {\n            let randomNumber = Math.floor(Math.random() * 1000);\n            if((randomNumber -= rate[3]) < 0) return 3;\n            if((randomNumber -= rate[2]) < 0) return 2;\n            if((randomNumber -= rate[1]) < 0) return 1;\n            return 0;\n        }\n\n        // 1000, 100, 10, 1\n        const talentList = {};\n        for(const talentId in this._talents) {\n            const { id, grade, name, description } = this._talents[talentId];\n            if(id == include) {\n                include = { grade, name, description, id };\n                continue;\n            }\n            if(!talentList[grade]) talentList[grade] = [{ grade, name, description, id }];\n            else talentList[grade].push({ grade, name, description, id });\n        }\n\n        return new Array(10)\n            .fill(1).map((v, i)=>{\n                if(!i && include) return include;\n                let grade = randomGrade();\n                while(talentList[grade].length == 0) grade--;\n                const length = talentList[grade].length;\n\n                const random = Math.floor(Math.random()*length) % length;\n                return talentList[grade].splice(random,1)[0];\n            });\n    }\n\n    allocationAddition(talents) {\n        if(Array.isArray(talents)) {\n            let addition = 0;\n            for(const talent of talents)\n                addition += this.allocationAddition(talent);\n            return addition;\n        }\n        return Number(this.get(talents).status) || 0;\n    }\n\n    do(talentId, property) {\n        const { effect, condition, grade, name, description } = this.get(talentId);\n        if(condition && !checkCondition(property, condition))\n            return null;\n        return { effect, grade, name, description };\n    }\n\n    replace(talents) {\n        const getReplaceList = (talent, talents) => {\n            const { replacement } = this.get(talent);\n            if(!replacement) return null;\n            const list = [];\n            if(replacement.grade) {\n                this.forEach(({id, grade})=>{\n                    if(!replacement.grade[grade]) return;\n                    if(this.exclusive(talents, id)) return;\n                    list.push([id, replacement.grade[grade]]);\n                })\n            }\n            if(replacement.talent) {\n                for(let talentId in replacement.talent) {\n                    const id = Number(talentId);\n                    if(this.exclusive(talents, id)) continue;\n                    list.push([id, replacement.talent[id]]);\n                }\n            }\n            return list;\n        }\n\n        const replace = (talent, talents) => {\n            const replaceList = getReplaceList(talent, talents);\n            if(!replaceList) return talent;\n            const rand = weightRandom(replaceList);\n            return replace(\n                rand, talents.concat(rand)\n            );\n        }\n\n        const newTalents = clone(talents);\n        const result = {};\n        for(const talent of talents) {\n            const replaceId = replace(talent, newTalents);\n            if(replaceId != talent) {\n                result[talent] = replaceId;\n                newTalents.push(replaceId);\n            }\n        }\n        return result;\n    }\n\n    forEach(callback) {\n        if(typeof callback != 'function') return;\n        for(const id in this._talents)\n            callback(clone(this._talents[id]), id);\n    }\n\n}\n\nconst talentMgr = new TalentManager();\nexport { talentMgr, TalentManager };\nexport type { ITalentInfo, ITalentData };\n"]}